{"version":3,"sources":["twitchFiles/getLiveStreamer.js","twitchFiles/getTenStreamers.js","spinningwheel/displaycomponent.jsx","App.js","serviceWorker.js","index.js"],"names":["config","require","rp","LiveStreamer","Object","classCallCheck","this","request","broadcastInfo","cursor","uri","qs","limit","stream_type","language","headers","Client-ID","client_id","Accept","json","_this","console","log","then","payload","randomNumber","Math","floor","random","_total","streams","catch","err","channel","url","GetStreamers","previewImages","URLS","imagesAndURLS","getTenImages","bind","getTenURLS","getTenStreams","that","set","Set","counter","has","add","push","singlebroadcastInfo","preview","large","forEach","broadcast","getImage","_this2","getURL","num","streamerData","_this3","i","URL","image","SpinningWheel","props","possibleConstructorReturn","getPrototypeOf","call","createWedges","assertThisInitialized","startSpin","getStreamers","state","spinning","wedges","sources","degree","spinBy","result","rotations","displayResult","streamers","TenStreamers","getTenImagesAndURLS","setState","totalWedges","keys","length","rotateBy","selected","key","concat","rotation","transform","react_default","a","createElement","style","className","src","alt","passBackResult","Promise","resolve","setTimeout","circleColor","spinner","_this4","animation","rel","position","react","onClick","React","Component","BasicExample","viewing","name","game","wedgesSource","getStreamerName","resetState","displayStream","getStreamerInfo","streamer","display_name","viewers","ReactPlayer_default","spinResult","BrowserRouter","displaycomponent","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2e63bb4.chunk.js","sourcesContent":["const config = require(\"./config\");\n// const _ = require(\"lodash\");\nconst rp = require(\"request-promise\");\n\nclass LiveStreamer {\n  constructor() {\n    this.request = this.request();\n    this.broadcastInfo = \"\";\n  }\n\n  request(cursor) {\n    const request = {\n      uri: \"https://api.twitch.tv/kraken/streams/\",\n      qs: {\n        limit: \"100\",\n        stream_type: \"live\",\n        language: \"en\"\n      },\n      headers: {\n        \"Client-ID\": config.client_id,\n        Accept: \"application/vnd.twitchtv.v5+json\"\n      },\n      json: true\n    };\n    if (cursor) {\n      request.qs.cursor = cursor;\n    }\n    return request;\n  }\n\n  getStreamerInfo() {\n    console.log(\"getting streamer\");\n    return rp(this.request)\n      .then(payload => {\n        let randomNumber = Math.floor(Math.random() * 100);\n        if (payload._total < 100) {\n          randomNumber = Math.floor(Math.random() * payload._total);\n        }\n        this.broadcastInfo = payload.streams[randomNumber];\n        return payload.streams[randomNumber];\n      })\n      .catch(err => {\n        console.log(\"couldn't make request\");\n        console.log(err);\n      });\n  }\n\n  getURL(broadcastInfo) {\n    return broadcastInfo.channel.url;\n  }\n}\n\nexport default LiveStreamer;\n\n// const stream = new LiveStreamer();\n// stream.getStreamerInfo().then(result => {\n//   console.log(typeof stream);\n//   console.log(stream.getDisplayName(result));\n// });\n","const config = require(\"./config\");\n// const _ = require(\"lodash\");\nconst rp = require(\"request-promise\");\n\nclass GetStreamers {\n  constructor() {\n    this.request = this.request();\n    this.broadcastInfo = [];\n    this.previewImages = [];\n    this.URLS = [];\n    this.imagesAndURLS = {};\n    this.getTenImages = this.getTenImages.bind(this);\n    this.getTenURLS = this.getTenURLS.bind(this);\n    this.getTenStreams = this.getTenStreams.bind(this);\n  }\n\n  request(cursor) {\n    const request = {\n      uri: \"https://api.twitch.tv/kraken/streams/\",\n      qs: {\n        limit: \"100\",\n        stream_type: \"live\",\n        language: \"en\"\n      },\n      headers: {\n        \"Client-ID\": config.client_id,\n        Accept: \"application/vnd.twitchtv.v5+json\"\n      },\n      json: true\n    };\n    if (cursor) {\n      request.qs.cursor = cursor;\n    }\n    return request;\n  }\n\n  getTenStreams() {\n    console.log(\"getting streamer\");\n    const that = this;\n    return rp(this.request)\n      .then(payload => {\n        let set = new Set([]);\n        let counter = 10;\n        while (counter > 0) {\n          let randomNumber = Math.floor(Math.random() * 99);\n          if (payload._total < 100) {\n            randomNumber = Math.floor(Math.random() * payload._total);\n          }\n          while (set.has(randomNumber)) {\n            randomNumber = Math.floor(Math.random() * 99);\n          }\n          set.add(randomNumber);\n          that.broadcastInfo.push(payload.streams[randomNumber]);\n          counter--;\n        }\n        return that.broadcastInfo;\n      })\n      .catch(err => {\n        console.log(\"couldn't make request\");\n        console.log(err);\n      });\n  }\n\n  getURL(broadcastInfo) {\n    return broadcastInfo.channel.url;\n  }\n\n  getImage(singlebroadcastInfo) {\n    return singlebroadcastInfo.preview.large;\n  }\n\n  getTenImages(broadcastInfo) {\n    broadcastInfo.forEach(broadcast => {\n      this.previewImages.push(this.getImage(broadcast));\n    });\n  }\n\n  getTenURLS(broadcastInfo) {\n    broadcastInfo.forEach(broadcast => {\n      this.URLS.push(this.getURL(broadcast));\n    });\n  }\n\n  chooseStream(num) {\n    const streamerData = {};\n    streamerData[\"URL\"] = this.URLS[num];\n    streamerData[\"previewImages\"] = this.previewImages[num];\n    return streamerData;\n  }\n\n  getTenImagesAndURLS(broadcastInfo) {\n    broadcastInfo.forEach((broadcast, i) => {\n      this.imagesAndURLS[i + 1] = {\n        URL: this.getURL(broadcast),\n        image: this.getImage(broadcast)\n      };\n    });\n  }\n}\n\nexport default GetStreamers;\n\n// const stream = new LiveStreamer();\n// stream.getTenStreams().then(() => {\n//   stream.getTenURLS(stream.broadcastInfo);\n//   stream.getTenImages(stream.broadcastInfo);\n//   console.log(stream.previewImages);\n//   console.log(stream.URLS);\n//   console.log(stream.chooseStream(1));\n// console.log(stream.getDisplayName(result));\n// });\n","import React, { Fragment } from \"react\";\nimport \"./style.css\";\nimport TenStreamers from \"./../twitchFiles/getTenStreamers\";\n\nclass SpinningWheel extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.createWedges = this.createWedges.bind(this);\n    this.startSpin = this.startSpin.bind(this);\n    this.getStreamers = this.getStreamers.bind(this);\n    this.state = {\n      spinning: \"start\",\n      wedges: null,\n      sources: {},\n      degree: 0,\n      spinBy: 0,\n      result: \"\",\n      rotations: this.props.rotations * 360,\n      displayResult: false\n    };\n  }\n\n  getStreamers() {\n    const streamers = new TenStreamers();\n    return streamers.getTenStreams().then(payload => {\n      console.log(payload);\n      streamers.getTenImagesAndURLS(payload);\n      this.setState({ sources: streamers.imagesAndURLS, spinning: \"start\" });\n    });\n  }\n\n  createWedges() {\n    console.log(\"creating wedges\");\n    const wedges = [];\n    const totalWedges = Object.keys(this.state.sources).length;\n    const degree = 360 / totalWedges;\n    let rotateBy = 0;\n    const selected = Math.floor(Math.random() * totalWedges);\n    const spinBy = () => {\n      if (degree * selected - degree < 0) {\n        return 0;\n      } else {\n        return -(degree * selected - degree);\n      }\n    };\n    let result;\n    console.log(`${selected} selected`);\n    console.log(`${spinBy()} spinBy`);\n    for (let key in this.state.sources) {\n      const rotation = {\n        transform: `rotate(${rotateBy}deg)`\n      };\n      if (key == selected || (selected == 0 && key == 1)) {\n        console.log(`${key} key`);\n        console.log(this.state.sources[key][\"URL\"]);\n        result = this.state.sources[key][\"URL\"];\n      }\n\n      wedges.push(\n        <div key={key} style={rotation} className={`scaleDiv wedgePosition`}>\n          <div className={\"triangleTransform\"}>\n            <div>\n              <img\n                className={\"sourceImage\"}\n                src={`${this.state.sources[`${key}`][\"image\"]}`}\n                alt=\"preview\"\n              />\n            </div>\n          </div>\n        </div>\n      );\n      rotateBy += degree;\n    }\n    this.setState({\n      spinning: \"spinning\",\n      wedges: wedges,\n      result: result,\n      spinBy: spinBy() + this.state.rotations\n    });\n    this.props.passBackResult(this.state.result);\n    return Promise.resolve(\"Success\");\n  }\n\n  startSpin() {\n    this.setState({ spinning: \"stopped\", displayResult: false });\n    this.getStreamers().then(() => {\n      this.createWedges().then(() => {\n        setTimeout(() => {\n          this.setState({ displayResult: true }, console.log(this));\n        }, 4950);\n      });\n    });\n  }\n\n  render() {\n    let circleColor;\n    let spinner;\n    if (this.state.spinning === \"start\") {\n      circleColor = \"positionCircleBlack\";\n      spinner = null;\n    }\n    if (this.state.spinning === \"spinning\") {\n      circleColor = \"circleAttrubutesRed\";\n      spinner = {\n        animation: \"spin 5s\",\n        transform: `translate(-50%, 0%) rotate(${this.state.spinBy}deg)`\n      };\n    }\n    if (this.state.spinning === \"stopped\") {\n      circleColor = \"circleAttrubutesRed\";\n    }\n    console.log(this.state.displayResult);\n    const displayResult = this.state.displayResult\n      ? this.props.displayResult()\n      : null;\n    const abs = { position: \"absolute\" };\n    const rel = { position: \"relative\" };\n    return (\n      <Fragment>\n        <div className={\"min\"}>\n          <div className={\"displayResult\"}>{displayResult}</div>\n          <div style={rel} className={\"pointer\"} />\n          <button\n            style={rel}\n            className={\"spinnerButton\"}\n            onClick={() => this.startSpin()}\n          >\n            Spin!\n          </button>\n          <div style={spinner} className={circleColor}>\n            <div className={\"createCirlce\"}>\n              <div className={\"cirlcePlacement\"}>{this.state.wedges}</div>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default SpinningWheel;\n\n// const spin = { \"clipPath\": \"polygon(50% 100%, 18% 0%, 82% 0%)\" };\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport LiveStreamer from \"./twitchFiles/getLiveStreamer\";\nimport ReactPlayer from \"react-player\";\nimport TenStreamers from \"./twitchFiles/getTenStreamers\";\nimport SpinningWheel from \"./spinningwheel/displaycomponent\";\n\nclass BasicExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: \"\",\n      viewing: \"\",\n      name: \"\",\n      game: \"\",\n      wedgesSource: {},\n      result: \"\"\n    };\n    this.getStreamerName = this.getStreamerName.bind(this);\n    this.resetState = this.resetState.bind(this);\n    // this.getWedges = this.getWedges.bind(this);\n    this.displayStream = this.displayStream.bind(this);\n  }\n\n  getStreamerName() {\n    const streamer = new LiveStreamer();\n    streamer.getStreamerInfo().then((payload, streamer) => {\n      console.log(payload.channel.url);\n      this.setState(\n        {\n          url: payload.channel.url,\n          name: payload.channel.display_name,\n          game: payload.game,\n          viewing: payload.viewers\n        },\n        console.log(\"state set\")\n      );\n    });\n  }\n  resetState() {\n    this.setState({ url: \"\", wedgesSource: {} });\n  }\n\n  displayStream() {\n    return <ReactPlayer url={`${this.state.url}`} />;\n  }\n\n  spinResult(spinResult) {\n    this.setState({ url: spinResult });\n  }\n\n  render() {\n    const Home = () => (\n      <div>\n        <h2>Home</h2>\n      </div>\n    );\n\n    // const video = !this.state.url ? null : this.displayStream();\n    return (\n      <Router>\n        <Fragment>\n          <SpinningWheel\n            displayResult={this.displayStream.bind(this)}\n            rotations={8}\n            passBackResult={this.spinResult.bind(this)}\n          />\n        </Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default BasicExample;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}