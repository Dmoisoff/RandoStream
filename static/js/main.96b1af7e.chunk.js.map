{"version":3,"sources":["twitchFiles/getTenStreamers.js","spinningwheel/wedges/createWedges.jsx","spinningwheel/displayComponent.jsx","test_images.js","App.js","serviceWorker.js","index.js"],"names":["config","require","rp","GetStreamers","Object","classCallCheck","this","request","broadcastInfo","previewImages","URLS","imagesAndURLS","getTenImages","bind","getTenURLS","getTenStreams","cursor","uri","qs","limit","stream_type","language","headers","Client-ID","client_id","Accept","json","that","then","payload","set","Set","counter","randomNumber","Math","floor","random","_total","has","add","push","streams","catch","err","console","log","channel","url","singlebroadcastInfo","preview","large","_this","forEach","broadcast","getImage","_this2","getURL","num","streamerData","_this3","i","result","image","Wedges","props","possibleConstructorReturn","getPrototypeOf","call","state","sources","rotations","wedges","createWedges","prevProps","prevState","setState","numOfWedges","leftSideObj","10","11","12","13","14","15","17","18","20","30","40","50","60","70","80","90","100","rightSideObj","numAsString","onesPlace","length","clipPath","concat","tensPlace","lowerRange","upperRange","range","_this$findTheSlope","findTheSlope","_this$findTheSlope2","slicedToArray","leftSlope","xRight","leftKey","rightKey","totalWedges","keys","degree","rotateBy","selected","triangleStyle","key","rotation","transform","react_default","a","createElement","style","className","src","alt","setResult","spinBy","react","React","Component","SpinningWheel","startSpin","assertThisInitialized","numberOfSources","backgroundColor","outerRingColor","buttonColor","durationOfSpin","showWedges","fadeInTime","spinning","wedgeSources","resultLocation","displayResult","disableButton","updateWheel","setToZero","firstSpin","loadInResult","getWedges","currentValues","values","properNumberOfSources","setWedges","toConsumableArray","slice","createShuffleObj","array","j","_ref","k","newOrder","setTimeout","boxShadow","transitionDuration","transition","opacity","border","buttonBorder","zIndex","_this4","circleState","circleStyle","buttonStyle","displayResultStyle","pointerColor","borderColor","displayWedges","wedges_createWedges","disabled","onClick","photosImages","1","2","3","4","5","6","7","8","9","BasicExample","numberOfRotations","changableSettings","changableColorSettings","getStreamers","displayStream","wheel","updated","streamers","TenStreamers","getTenImagesAndURLS","spinResult","ReactPlayer_default","width","e","_this$setState2","id","target","value","toLowerCase","includes","defineProperty","imageSources","display","updateValues","inputs","settings","description","dangerouslySetInnerHTML","__html","type","onBlur","onKeyPress","updateOnEnter","spinningWheel","displayComponent_SpinningWheel","changableSettingsNumbers","BrowserRouter","maxWidth","marginLeft","marginRight","onChange","updateSources","defaultValue","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96b1af7e.chunk.js","sourcesContent":["const config = require(\"./config\");\n// const _ = require(\"lodash\");\nconst rp = require(\"request-promise\");\n\nclass GetStreamers {\n  constructor() {\n    this.request = this.request();\n    this.broadcastInfo = [];\n    this.previewImages = [];\n    this.URLS = [];\n    this.imagesAndURLS = {};\n    this.getTenImages = this.getTenImages.bind(this);\n    this.getTenURLS = this.getTenURLS.bind(this);\n    this.getTenStreams = this.getTenStreams.bind(this);\n  }\n\n  request(cursor) {\n    const request = {\n      uri: \"https://api.twitch.tv/kraken/streams/\",\n      qs: {\n        limit: \"100\",\n        stream_type: \"live\",\n        language: \"en\"\n      },\n      headers: {\n        \"Client-ID\": config.client_id,\n        Accept: \"application/vnd.twitchtv.v5+json\"\n      },\n      json: true\n    };\n    if (cursor) {\n      request.qs.cursor = cursor;\n    }\n    return request;\n  }\n\n  getTenStreams() {\n    const that = this;\n    return rp(this.request)\n      .then(payload => {\n        let set = new Set([]);\n        let counter = 50; //10\n        while (counter > 0) {\n          let randomNumber = Math.floor(Math.random() * 99);\n          if (payload._total < 100) {\n            randomNumber = Math.floor(Math.random() * payload._total);\n          }\n          while (set.has(randomNumber)) {\n            randomNumber = Math.floor(Math.random() * 99);\n          }\n          set.add(randomNumber);\n          that.broadcastInfo.push(payload.streams[randomNumber]);\n          counter--;\n        }\n        return that.broadcastInfo;\n      })\n      .catch(err => {\n        console.log(\"couldn't make request\");\n        console.log(err);\n      });\n  }\n\n  getURL(broadcastInfo) {\n    return broadcastInfo.channel.url;\n  }\n\n  getImage(singlebroadcastInfo) {\n    return singlebroadcastInfo.preview.large;\n  }\n\n  getTenImages(broadcastInfo) {\n    broadcastInfo.forEach(broadcast => {\n      this.previewImages.push(this.getImage(broadcast));\n    });\n  }\n\n  getTenURLS(broadcastInfo) {\n    broadcastInfo.forEach(broadcast => {\n      this.URLS.push(this.getURL(broadcast));\n    });\n  }\n\n  chooseStream(num) {\n    const streamerData = {};\n    streamerData[\"URL\"] = this.URLS[num];\n    streamerData[\"previewImages\"] = this.previewImages[num];\n    return streamerData;\n  }\n\n  getTenImagesAndURLS(broadcastInfo) {\n    broadcastInfo.forEach((broadcast, i) => {\n      this.imagesAndURLS[i + 1] = {\n        result: this.getURL(broadcast),\n        image: this.getImage(broadcast)\n      };\n    });\n  }\n}\n\nexport default GetStreamers;\n","import React, { Fragment } from \"react\";\nimport \"./styleWedges.css\";\n\nclass Wedges extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sources: this.props.sources,\n      rotations: (this.props.rotations || 8) * 360,\n      wedges: null\n    };\n  }\n\n  componentDidMount() {\n    this.createWedges();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      prevProps.sources !== this.props.sources ||\n      prevState.rotations !== this.state.rotations\n    ) {\n      this.createWedges();\n    } else if (prevProps.rotations !== this.props.rotations) {\n      this.setState({ rotations: (this.props.rotations || 8) * 360 });\n    }\n  }\n\n  triangleStyle(numOfWedges) {\n    let leftSideObj = {\n      10: 19,\n      11: 23,\n      12: 26,\n      13: 30,\n      14: 32,\n      15: 34,\n      17: 35.5,\n      18: 35.6,\n      20: 36,\n      30: 40,\n      40: 43,\n      50: 44,\n      60: 45.5,\n      70: 45.7,\n      80: 45.8,\n      90: 45.9,\n      100: 47.2\n    };\n    let rightSideObj = {\n      10: 81,\n      11: 79,\n      12: 77.5,\n      13: 76,\n      14: 75,\n      15: 74,\n      17: 70.5,\n      18: 69,\n      20: 66,\n      30: 60,\n      40: 58,\n      50: 56,\n      60: 55,\n      70: 54,\n      80: 53,\n      90: 52.5,\n      100: 52.8\n    };\n    let numAsString = \"\" + numOfWedges;\n    let onesPlace = +numAsString[numAsString.length - 1];\n    if (rightSideObj[numOfWedges]) {\n      return {\n        clipPath: `polygon(50% 100%, ${leftSideObj[numOfWedges]}% 0%, ${\n          rightSideObj[numOfWedges]\n        }% 0%)`\n      };\n    } else {\n      let tensPlace = +(\"\" + numOfWedges)[0];\n      let lowerRange = +(tensPlace + \"0\");\n      let upperRange = +(\"\" + (tensPlace + 1) + \"0\");\n      if (numOfWedges < 20 && numOfWedges > 15) {\n        lowerRange = null;\n        upperRange = null;\n        let counter = 1;\n        while (!lowerRange || !upperRange) {\n          if (rightSideObj[numOfWedges + counter])\n            upperRange = numOfWedges + counter;\n          if (rightSideObj[numOfWedges - counter])\n            lowerRange = numOfWedges - counter;\n          counter++;\n        }\n      }\n      let range = [lowerRange, upperRange];\n\n      let [leftSlope, rightSlope] = this.findTheSlope(\n        range,\n        leftSideObj,\n        rightSideObj\n      );\n      let xRight = rightSlope * onesPlace + rightSideObj[lowerRange];\n      let xLeft = leftSlope * onesPlace + leftSideObj[lowerRange];\n\n      return {\n        clipPath: `polygon(50% 100%, ${xLeft}% 0%, ${xRight}% 0%)`\n      };\n    }\n  }\n\n  findTheSlope(range, leftKey, rightKey) {\n    let lowerRange = range[0];\n    let upperRange = range[1];\n\n    let leftSlope = (leftKey[upperRange] - leftKey[lowerRange]) / 10;\n\n    let rightSlope = (rightKey[upperRange] - rightKey[lowerRange]) / 10;\n\n    return [leftSlope, rightSlope];\n  }\n\n  createWedges() {\n    const wedges = [];\n    const totalWedges = Object.keys(this.props.sources).length;\n    const degree = 360 / totalWedges;\n    let rotateBy = 0;\n    const selected = Math.floor(Math.random() * totalWedges);\n    let result;\n    let triangleStyle = this.triangleStyle(totalWedges);\n    for (let key in this.props.sources) {\n      const rotation = {\n        transform: `rotate(${rotateBy}deg)`\n      };\n\n      if (key == selected || (selected == 0 && key == 1)) {\n        console.log(this.props.sources[key][\"image\"]);\n        console.log(this.props.sources[key][\"result\"]);\n        result = this.props.sources[key][\"result\"];\n      }\n\n      wedges.push(\n        <div key={key} style={rotation} className={`scaleDiv wedgePosition`}>\n          <div style={triangleStyle} className={\"triangleTransform\"}>\n            <div>\n              <img\n                className={\"sourceImage\"}\n                src={`${this.props.sources[`${key}`][\"image\"]}`}\n                alt=\"preview\"\n              />\n            </div>\n          </div>\n        </div>\n      );\n      rotateBy += degree;\n    }\n\n    this.props.setResult(\n      result,\n      this.spinBy(degree, selected) + this.state.rotations\n    );\n\n    this.setState({\n      wedges: wedges\n    });\n  }\n\n  spinBy(degree, selected) {\n    return degree * selected - degree < 0 ? 0 : -(degree * selected - degree);\n  }\n\n  render() {\n    return <Fragment>{this.state.wedges}</Fragment>;\n  }\n}\n\nexport default Wedges;\n","import React, { Fragment } from \"react\";\nimport \"./displayComponentStyle.css\";\nimport Wedges from \"./wedges/createWedges.jsx\";\n\nclass SpinningWheel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.startSpin = this.startSpin.bind(this);\n    let numberOfSources = this.props.numberOfSources;\n    if (!numberOfSources || numberOfSources < 10) {\n      numberOfSources = 10;\n    }\n    this.state = {\n      sources: this.props.sources,\n      numberOfSources: numberOfSources,\n      backgroundColor: this.props.backgroundColor || \"orange\",\n      outerRingColor: this.props.outerRingColor || \"white\",\n      buttonColor: this.props.buttonColor || \"orange\",\n      durationOfSpin: this.props.durationOfSpin || 5,\n      showWedges: this.props.showWedges === false ? false : true,\n      fadeInTime: this.props.fadeInTime || 1,\n      spinning: false,\n      wedgeSources: {},\n      spinBy: 0,\n      resultLocation: 0,\n      result: \"\",\n      displayResult: false,\n      disableButton: false,\n      updateWheel: false,\n      setToZero: false,\n      firstSpin: true,\n      loadInResult: false\n    };\n  }\n\n  componentDidMount() {\n    if (typeof this.state.sources === \"function\") {\n      this.getWedges();\n    } else {\n      let sources = this.state.sources;\n      let currentValues = Object.values(sources);\n      if (currentValues.length < this.state.numberOfSources) {\n        sources = this.properNumberOfSources(currentValues);\n      }\n      this.setWedges(sources);\n    }\n  }\n\n  properNumberOfSources(sources) {\n    let currentValues = Object.values(sources);\n    while (currentValues.length < this.state.numberOfSources) {\n      currentValues = [...currentValues, ...currentValues];\n    }\n    currentValues = currentValues.slice(0, this.state.numberOfSources);\n    const newSources = this.createShuffleObj(currentValues);\n    return newSources;\n  }\n\n  createShuffleObj(array) {\n    let sources = {};\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    for (var k = 0; k < array.length; k++) {\n      sources[k + 1] = array[k];\n    }\n    return sources;\n  }\n\n  getWedges() {\n    if (typeof this.state.sources === \"function\") {\n      return this.state.sources().then(payload => {\n        let currentValues = Object.values(payload);\n        if (\n          currentValues.length < this.state.numberOfSources ||\n          currentValues.length > this.state.numberOfSources\n        ) {\n          payload = this.properNumberOfSources(currentValues);\n        }\n        this.setWedges(payload);\n      });\n    } else {\n      let newOrder = this.createShuffleObj(\n        Object.values(this.state.wedgeSources)\n      );\n      this.setWedges(newOrder);\n    }\n  }\n\n  setWedges(sources) {\n    this.setState({\n      spinning: false,\n      wedgeSources: sources,\n      spinBy: 0,\n      resultLocation: 0,\n      displayResult: false,\n      updateWheel: false,\n      setToZero: true,\n      result: null,\n      loadInResult: false\n    });\n  }\n\n  setResult(result, resultLocation) {\n    this.setState({\n      result: result,\n      resultLocation: resultLocation,\n      loadInResult: true\n    });\n  }\n\n  // resetWheel() {\n  //   this.setState({\n  //     numberOfSources: this.props.numberOfSources,\n  //     spinBy: 0,\n  //     resultLocation: 0,\n  //     displayResult: false,\n  //     updateWheel: false,\n  //     setToZero: true,\n  //     result: null,\n  //     loadInResult: false,\n  //     spinning: false,\n  //     firstSpin: true,\n  //     showWedges: this.props.showWedges === false ? false : true\n  //   });\n  // }\n\n  componentDidUpdate(prevProps, prevState) {\n    // if (prevProps.numberOfSources !== this.props.numberOfSources) {\n    //   this.resetWheel();\n    // } else if (prevState.numberOfSources !== this.state.numberOfSources) {\n    //   this.getWedges();\n    // } else if (prevProps.sources !== this.props.sources) {\n    //   this.setState({ sources: this.props.sources });\n    // } else if (prevState.sources !== this.state.sources) {\n    //   this.setWedges(this.state.sources);\n    // } else if (prevProps.durationOfSpin !== this.props.durationOfSpin) {\n    //   this.setState({ durationOfSpin: this.props.durationOfSpin || 5 });\n    // } else if (prevProps.fadeInTime !== this.props.fadeInTime) {\n    //   this.setState({ fadeInTime: this.props.fadeInTime || 1 });\n    // } else if (prevProps.showWedges !== this.props.showWedges) {\n    //   this.resetWheel();\n    // } else\n    if (\n      !this.state.firstSpin &&\n      !this.state.updateWheel &&\n      prevState.result !== this.state.result\n    ) {\n      this.startSpin();\n    } else if (\n      prevState.result !== this.state.result &&\n      this.state.showWedges &&\n      this.state.spinning\n    ) {\n      this.startSpin();\n    } else if (this.state.disableButton) {\n      setTimeout(() => {\n        this.setState({\n          displayResult: true,\n          disableButton: false,\n          spinning: false,\n          updateWheel: true\n        });\n      }, this.state.durationOfSpin * 1000);\n    }\n  }\n\n  startSpin() {\n    if (this.state.updateWheel) {\n      this.getWedges();\n    } else if (!this.state.showWedges) {\n      this.setState({\n        showWedges: true,\n        spinning: true\n      });\n    } else {\n      this.setState({\n        spinBy: this.state.resultLocation,\n        disableButton: true,\n        spinning: true,\n        setToZero: false,\n        firstSpin: false\n      });\n    }\n  }\n\n  circleStyle() {\n    if (!this.state.setToZero) {\n      return {\n        backgroundColor: `${this.props.backgroundColor}`,\n        boxShadow: `0px 0px 0px 12px\n        ${this.props.outerRingColor}`,\n        transform: `translate(-50%, 0%) rotate(${this.state.spinBy}deg)`,\n        transitionDuration: `${this.state.durationOfSpin}s`\n      };\n    } else {\n      return {\n        backgroundColor: `${this.props.backgroundColor}`,\n        boxShadow: `0px 0px 0px 12px\n        ${this.props.outerRingColor}`,\n        transform: `translate(-50%, 0%) rotate(0deg)`\n      };\n    }\n  }\n\n  buttonStyle() {\n    if (this.state.displayResult) {\n      return {\n        backgroundColor: this.props.buttonColor,\n        transition: `opacity ${this.state.fadeInTime}s`,\n        opacity: \".5\",\n        border: `4px solid ${this.props.buttonBorder}`\n      };\n    } else {\n      return {\n        backgroundColor: this.props.buttonColor,\n        border: `4px solid ${this.props.buttonBorder}`\n      };\n    }\n  }\n\n  displayResultStyle() {\n    if (this.state.displayResult) {\n      return {\n        transition: `opacity ${this.state.fadeInTime}s`,\n        opacity: \"1\",\n        zIndex: \"4\"\n      };\n    } else {\n      return {\n        opacity: \"0\"\n      };\n    }\n  }\n\n  render() {\n    let circleState = this.circleStyle();\n    let buttonStyle = this.buttonStyle();\n    let displayResultStyle = this.displayResultStyle();\n    let pointerColor = this.props.outerRingColor\n      ? {\n          borderColor: `${this.props.outerRingColor} transparent transparent`\n        }\n      : { borderColor: `white transparent transparent` };\n\n    let displayResult =\n      this.state.loadInResult && this.state.result ? (\n        <div style={displayResultStyle} className={\"displayResult\"}>\n          {this.props.displayResult(this.state.result)}\n        </div>\n      ) : null;\n\n    const displayWedges = this.state.showWedges ? (\n      <Wedges\n        sources={this.state.wedgeSources}\n        rotations={this.props.rotations}\n        setResult={this.setResult.bind(this)}\n      />\n    ) : null;\n    return (\n      <Fragment>\n        <div className={\"min\"}>\n          {displayResult}\n          <div className={\"alignmentOnCircle\"}>\n            <div style={pointerColor} className={\"pointer\"} />\n            <button\n              disabled={this.state.disableButton}\n              style={buttonStyle}\n              className={\"spinnerButton\"}\n              onClick={() => this.startSpin()}\n            >\n              Spin!\n            </button>\n          </div>\n          <div style={circleState} className={\"circleStyle\"}>\n            <div className={\"createCirlce\"}>\n              <div className={\"cirlcePlacement\"}>{displayWedges}</div>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport { SpinningWheel };\n\n// const spin = { \"clipPath\": \"polygon(50% 100%, 18% 0%, 82% 0%)\" };\n","let photosImages = {\n  \"1\": {\n    image: \"./test_images/lighting.jpg\",\n    result: \"./test_images/lighting.jpg\"\n  },\n  \"2\": {\n    image: \"./test_images/costume-head-horn-908686.jpg\",\n    result: \"./test_images/costume-head-horn-908686.jpg\"\n  },\n  \"3\": {\n    image: \"./test_images/001_.jpg\",\n    result: \"./test_images/001_.jpg\"\n  },\n  \"4\": {\n    image: \"./test_images/calf-whale-tail_adapt_1900_1.jpg\",\n    result: \"./test_images/calf-whale-tail_adapt_1900_1.jpg\"\n  },\n  \"5\": {\n    image: \"./test_images/ice_cave.jpeg\",\n    result: \"./test_images/ice_cave.jpeg\"\n  },\n  \"6\": {\n    image: \"./test_images/lights.jpeg\",\n    result: \"./test_images/lights.jpeg\"\n  },\n  \"7\": {\n    image: \"./test_images/slient.jpeg\",\n    result: \"./test_images/slient.jpeg\"\n  },\n  \"8\": {\n    image:\n      \"./test_images/NationalGeographic_2343397_ngsversion_1493305203123_adapt_1900_1.jpg\",\n    result:\n      \"./test_images/NationalGeographic_2343397_ngsversion_1493305203123_adapt_1900_1.jpg\"\n  },\n  \"9\": {\n    image: \"./test_images/relax.jpeg\",\n    result: \"./test_images/relax.jpeg\"\n  },\n  \"10\": {\n    image: \"./test_images/flowers.jpg\",\n    result: \"./test_images/flowers.jpg\"\n  }\n};\n\nlet numberImages = {};\n\nexport { photosImages, numberImages };\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ReactPlayer from \"react-player\";\nimport TenStreamers from \"./twitchFiles/getTenStreamers\";\nimport { SpinningWheel } from \"./spinningwheel/displayComponent\";\nimport \"./App.css\";\nimport { photosImages } from \"./test_images\";\n// import { SpinningWheel } from \"wheel-test\";\n\nclass BasicExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfSources: 10,\n      numberOfRotations: 10,\n      durationOfSpin: 10,\n      fadeInTime: 1,\n      outerRingColor: \"white\",\n      backgroundColor: \"orange\",\n      buttonColor: \"orange\",\n      buttonBorder: \"black\",\n      showWedges: true,\n      changableSettings: [\n        [\"numberOfSources\", \"Number of wedges: <br/> 10 - 100\"],\n        [\"fadeInTime\", \"Duration of reveal: <br/> in secs\"],\n        [\"durationOfSpin\", \"Duration of spinning: <br/> in secs\"],\n        [\n          \"numberOfRotations\",\n          \"Number of rotations: <br/> if the number is to large, the wheel will abruptly stop then reveal the result\"\n        ]\n      ],\n      changableColorSettings: [\n        [\"outerRingColor\", \"Outer Ring Color\"],\n        [\"backgroundColor\", \"Background Color\"],\n        [\"buttonColor\", \"Button Color\"],\n        [\"buttonBorder\", \"Button Border\"]\n      ],\n      sources: this.getStreamers,\n      displayResult: this.displayStream.bind(this),\n      wheel: null,\n      updated: false\n    };\n    this.getStreamers = this.getStreamers.bind(this);\n    this.displayStream = this.displayStream.bind(this);\n  }\n\n  getStreamers() {\n    const streamers = new TenStreamers();\n    return streamers.getTenStreams().then(payload => {\n      streamers.getTenImagesAndURLS(payload);\n      return streamers.imagesAndURLS;\n    });\n  }\n\n  displayStream(spinResult) {\n    return <ReactPlayer url={`${spinResult}`} width={\"inherit\"} />;\n  }\n\n  display(spinResult) {\n    return <img src={`${spinResult}`} alt=\"result\" />;\n  }\n\n  updateValues(e) {\n    const id = e.target.id;\n    let value = e.target.value;\n    if (value === \"\" || this.state[id] == value) {\n      return;\n    } else if (\n      id.toLowerCase().includes(\"color\") ||\n      id.toLowerCase().includes(\"button\")\n    ) {\n      this.setState({ [id]: value });\n      return;\n    } else if (e.target.id === \"numberOfSources\") {\n      value = +e.target.value;\n      if (value < 10) value = 10;\n      if (value > 100) value = 100;\n    } else if (e.target.id === \"showWedges\") {\n      if (value === \"false\") {\n        value = false;\n      } else {\n        value = true;\n      }\n    }\n    this.setState({ [id]: value, updated: true });\n  }\n\n  updateSources(e) {\n    let value = e.target.value;\n    if (value === \"function\") {\n      this.setState({\n        sources: this.getStreamers,\n        displayResult: this.displayStream.bind(this),\n        updated: true\n      });\n    } else {\n      const imageSources = photosImages;\n      this.setState({\n        sources: imageSources,\n        displayResult: this.display.bind(this),\n        updated: true\n      });\n    }\n  }\n\n  updateOnEnter(e) {\n    if (e.key === \"Enter\") {\n      this.updateValues(e);\n    }\n  }\n\n  changableSettings(inputs) {\n    const display = [];\n    const settings = inputs;\n    for (let i = 0; i < settings.length; i++) {\n      const id = settings[i][0];\n      let description = settings[i][1];\n      display.push(\n        <li key={i} className={\"inputFormating\"}>\n          <p dangerouslySetInnerHTML={{ __html: description }} />\n          <input\n            id={`${id}`}\n            type={\"text\"}\n            onBlur={e => this.updateValues(e)}\n            onKeyPress={e => this.updateOnEnter(e)}\n          />\n        </li>\n      );\n    }\n    return display;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.updated) {\n      this.spinningWheel();\n    }\n  }\n\n  componentDidMount() {\n    this.spinningWheel();\n  }\n\n  spinningWheel() {\n    if (this.state.updated)\n      this.setState({\n        updated: false\n      });\n    return (\n      <SpinningWheel\n        sources={this.state.sources}\n        displayResult={this.state.displayResult}\n        buttonColor={this.state.buttonColor}\n        backgroundColor={this.state.backgroundColor}\n        outerRingColor={this.state.outerRingColor}\n        numberOfSources={this.state.numberOfSources}\n        buttonBorder={this.state.buttonBorder}\n        fadeInTime={this.state.fadeInTime}\n        durationOfSpin={this.state.durationOfSpin}\n        rotations={this.state.numberOfRotations}\n        showWedges={this.state.showWedges}\n      />\n    );\n  }\n\n  render() {\n    let changableSettingsNumbers = this.changableSettings(\n      this.state.changableSettings\n    );\n    let changableColorSettings = this.changableSettings(\n      this.state.changableColorSettings\n    );\n    let wheel = !this.state.updated ? this.spinningWheel() : null;\n    return (\n      <Router>\n        <Fragment>\n          <div className={\"centerArea\"}>\n            <div\n              style={{ maxWidth: \"285px\", zIndex: 5 }}\n              className={\"changableSettings\"}\n            >\n              <ul>\n                <p>\n                  Below you can modify the colors of the wheel. <br /> Please\n                  use valid CSS colors\n                </p>\n                {changableColorSettings}\n              </ul>\n            </div>\n            <div style={{ marginLeft: \"50px\", marginRight: \"50px\" }}>\n              {wheel}\n            </div>\n            <div\n              style={{ maxWidth: \"285px\", zIndex: 5 }}\n              className={\"changableSettings\"}\n            >\n              <ul>\n                <p>\n                  Below you can modify the attrubutes of the wheel. <br />{\" \"}\n                  Updating these elements will cause the wheel to reload its\n                  contents\n                </p>\n                {changableSettingsNumbers}\n              </ul>\n            </div>\n          </div>\n          <div className={\"lowerSetting\"}>\n            <div className={\"centerItems\"}>\n              <p>Show Wedges before spin</p>\n              <select\n                value={this.state.showWedges}\n                id={\"showWedges\"}\n                onChange={e => this.updateValues(e)}\n              >\n                <option value={true}>true</option>\n                <option value={false}>false</option>\n              </select>\n            </div>\n            <div className={\"centerItems\"}>\n              <p>Types of inputs</p>\n              <select onChange={e => this.updateSources(e)}>\n                <option defaultValue value={\"function\"}>\n                  Results from API\n                </option>\n                <option value={\"photosImages\"}>Photos</option>\n              </select>\n            </div>\n          </div>\n        </Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default BasicExample;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // console.log(\n          //   'This web app is being served cache-first by a service ' +\n          //     'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          // );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}